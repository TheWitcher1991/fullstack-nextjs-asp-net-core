// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Domain;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookEntityCategoryEntity", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookEntityCategoryEntity");
                });

            modelBuilder.Entity("EmotionEntityImpressionEntity", b =>
                {
                    b.Property<Guid>("EmotionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImpressionsId")
                        .HasColumnType("uuid");

                    b.HasKey("EmotionsId", "ImpressionsId");

                    b.HasIndex("ImpressionsId");

                    b.ToTable("EmotionEntityImpressionEntity");
                });

            modelBuilder.Entity("backend.Domain.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Holder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Pages")
                        .HasColumnType("integer");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Translator")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.HasIndex("UserId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("backend.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.HasIndex("TopicId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50e7f784-3fed-40a1-936e-0ff00dbf0d42"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3021),
                            Title = "Клиническая",
                            TopicId = new Guid("ceaae55b-1d51-45b5-8a9b-10a4b20720ab")
                        },
                        new
                        {
                            Id = new Guid("c3bb6d98-f732-4580-a869-f1be5bde4907"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3076),
                            Title = "Социальная",
                            TopicId = new Guid("ceaae55b-1d51-45b5-8a9b-10a4b20720ab")
                        },
                        new
                        {
                            Id = new Guid("11c262b0-9d0e-4607-9cc4-23b87e59f2c2"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3078),
                            Title = "Когнитивная",
                            TopicId = new Guid("ceaae55b-1d51-45b5-8a9b-10a4b20720ab")
                        },
                        new
                        {
                            Id = new Guid("dfacecd8-5375-45c0-9102-be09583b84dd"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3082),
                            Title = "Личная эффективность",
                            TopicId = new Guid("77a24f9e-92cb-47ea-9081-20e304d0c265")
                        },
                        new
                        {
                            Id = new Guid("0bfa266f-511b-4257-aa28-27a538cb4aa2"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3083),
                            Title = "Мотивация",
                            TopicId = new Guid("77a24f9e-92cb-47ea-9081-20e304d0c265")
                        },
                        new
                        {
                            Id = new Guid("5610063f-50e8-4544-94ae-9fdf150151f0"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3085),
                            Title = "Навыки общения",
                            TopicId = new Guid("77a24f9e-92cb-47ea-9081-20e304d0c265")
                        },
                        new
                        {
                            Id = new Guid("c3d6ad34-06fd-464c-b468-02272aaf7368"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3089),
                            Title = "История",
                            TopicId = new Guid("2423895f-d942-43c9-a9e6-0780cc8e951f")
                        },
                        new
                        {
                            Id = new Guid("8d574d0d-9a49-4c5c-9a18-eadcaf66368c"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3090),
                            Title = "Наука",
                            TopicId = new Guid("2423895f-d942-43c9-a9e6-0780cc8e951f")
                        },
                        new
                        {
                            Id = new Guid("a74c1be4-44ee-40ce-9dcf-ff8e9c1e7758"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3091),
                            Title = "Биографии",
                            TopicId = new Guid("2423895f-d942-43c9-a9e6-0780cc8e951f")
                        },
                        new
                        {
                            Id = new Guid("59ae8a73-7a05-4f0f-ad71-b3b0514b50c7"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3098),
                            Title = "Любовные романы",
                            TopicId = new Guid("d8401754-a668-4dfb-bf8f-4285b09f2ae2")
                        },
                        new
                        {
                            Id = new Guid("6cc9ffbc-ad3b-4bad-8a98-12ab77b23d02"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3099),
                            Title = "Драма",
                            TopicId = new Guid("d8401754-a668-4dfb-bf8f-4285b09f2ae2")
                        },
                        new
                        {
                            Id = new Guid("843a2dcf-0a5d-4c73-b727-5b33db7289f9"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3100),
                            Title = "Эротика",
                            TopicId = new Guid("d8401754-a668-4dfb-bf8f-4285b09f2ae2")
                        },
                        new
                        {
                            Id = new Guid("645a9d1b-8125-4445-a85b-ca935ff88496"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3103),
                            Title = "Современная",
                            TopicId = new Guid("bbc92f51-4ce7-4951-930b-25c81a077fb1")
                        },
                        new
                        {
                            Id = new Guid("83fe682e-e364-4493-a62a-68a4712ca8b0"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3104),
                            Title = "Классическая",
                            TopicId = new Guid("bbc92f51-4ce7-4951-930b-25c81a077fb1")
                        },
                        new
                        {
                            Id = new Guid("5eeab460-0554-467c-93d8-ca388a5f0c2c"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3105),
                            Title = "Экспериментальная",
                            TopicId = new Guid("bbc92f51-4ce7-4951-930b-25c81a077fb1")
                        },
                        new
                        {
                            Id = new Guid("c12c5d47-f78c-441e-943b-cb4e94239ec4"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3108),
                            Title = "Классические",
                            TopicId = new Guid("bd922041-23f5-4ad2-8ad3-9619acd1987d")
                        },
                        new
                        {
                            Id = new Guid("73044955-3afa-48e8-82f1-bc10330ed7bb"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3109),
                            Title = "Полицейские",
                            TopicId = new Guid("bd922041-23f5-4ad2-8ad3-9619acd1987d")
                        },
                        new
                        {
                            Id = new Guid("b9e4c150-a9d1-4e48-bc94-9574344d393b"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3113),
                            Title = "Психологические",
                            TopicId = new Guid("bd922041-23f5-4ad2-8ad3-9619acd1987d")
                        },
                        new
                        {
                            Id = new Guid("7b33e9e6-5919-4734-9b14-33e59ba65850"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3116),
                            Title = "Финансы",
                            TopicId = new Guid("d0698f7c-bfef-4f30-a207-8ffb81aa9c99")
                        },
                        new
                        {
                            Id = new Guid("ff79412d-1249-4afd-ae71-3af05922deb3"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3117),
                            Title = "Менеджмент",
                            TopicId = new Guid("d0698f7c-bfef-4f30-a207-8ffb81aa9c99")
                        },
                        new
                        {
                            Id = new Guid("30f92c1e-901e-4418-904d-574469ff2acc"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3118),
                            Title = "Стартапы",
                            TopicId = new Guid("d0698f7c-bfef-4f30-a207-8ffb81aa9c99")
                        },
                        new
                        {
                            Id = new Guid("cc582c5d-0546-43d0-afdf-80ed48172e86"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3121),
                            Title = "Фэнтези",
                            TopicId = new Guid("8621520d-751d-453e-a5b8-f159806b3cd6")
                        },
                        new
                        {
                            Id = new Guid("74c52b65-8f99-474d-9ec8-370bc3f762de"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3123),
                            Title = "Реализм",
                            TopicId = new Guid("8621520d-751d-453e-a5b8-f159806b3cd6")
                        },
                        new
                        {
                            Id = new Guid("22e9feeb-7045-4988-a3b0-94c73e11bbfb"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3124),
                            Title = "Дружба",
                            TopicId = new Guid("8621520d-751d-453e-a5b8-f159806b3cd6")
                        },
                        new
                        {
                            Id = new Guid("2af47c33-9b70-45f7-9a16-29cf77a56b73"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3127),
                            Title = "Научная",
                            TopicId = new Guid("a7dcde27-4593-4678-b41d-035ac02b50da")
                        },
                        new
                        {
                            Id = new Guid("18d8216f-424d-427d-939e-a8dbcb39e752"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3130),
                            Title = "Космическая",
                            TopicId = new Guid("a7dcde27-4593-4678-b41d-035ac02b50da")
                        },
                        new
                        {
                            Id = new Guid("c309af06-4625-49a2-9e52-149ef5a29243"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3131),
                            Title = "Альтернативная история",
                            TopicId = new Guid("a7dcde27-4593-4678-b41d-035ac02b50da")
                        },
                        new
                        {
                            Id = new Guid("c8d8ad7f-b489-4e94-80a1-a87ae76a6410"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3134),
                            Title = "Эпическое",
                            TopicId = new Guid("ec548451-9cf2-4a7c-aaa3-3c45a5bc556a")
                        },
                        new
                        {
                            Id = new Guid("657674b6-f310-4a96-818e-48cca4a0342d"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3135),
                            Title = "Темное",
                            TopicId = new Guid("ec548451-9cf2-4a7c-aaa3-3c45a5bc556a")
                        },
                        new
                        {
                            Id = new Guid("39c5321f-66e6-4d79-8af6-c5dfa04bce85"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3136),
                            Title = "Мифологическое",
                            TopicId = new Guid("ec548451-9cf2-4a7c-aaa3-3c45a5bc556a")
                        },
                        new
                        {
                            Id = new Guid("e9f103b6-c782-45e9-9feb-723d4e434cd2"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3139),
                            Title = "Автобиографии",
                            TopicId = new Guid("a93cc00e-9698-4b25-8af2-2be8c1419d02")
                        },
                        new
                        {
                            Id = new Guid("42b73148-ef2d-4cfb-b597-8d32c153feb9"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3140),
                            Title = "Исторические",
                            TopicId = new Guid("a93cc00e-9698-4b25-8af2-2be8c1419d02")
                        },
                        new
                        {
                            Id = new Guid("23174870-a90b-4b48-81d1-d034444ea930"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3141),
                            Title = "Литературные",
                            TopicId = new Guid("a93cc00e-9698-4b25-8af2-2be8c1419d02")
                        },
                        new
                        {
                            Id = new Guid("96b3f268-1132-4d8a-b86d-baa86988e440"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3146),
                            Title = "Политические",
                            TopicId = new Guid("6e2f95ea-1f6e-4a4c-9426-0163d8fe96b6")
                        },
                        new
                        {
                            Id = new Guid("9adf744c-ca21-48b7-9926-9770c2c8827a"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3148),
                            Title = "Шпионские",
                            TopicId = new Guid("6e2f95ea-1f6e-4a4c-9426-0163d8fe96b6")
                        },
                        new
                        {
                            Id = new Guid("e016898a-e433-4326-8fa4-5217dfacfae6"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3149),
                            Title = "Психологические",
                            TopicId = new Guid("6e2f95ea-1f6e-4a4c-9426-0163d8fe96b6")
                        },
                        new
                        {
                            Id = new Guid("208aa1cf-e7e6-493b-a99b-3e7245f7d046"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3151),
                            Title = "Готические",
                            TopicId = new Guid("36638e3f-0125-45a5-b319-5168f5204bd6")
                        },
                        new
                        {
                            Id = new Guid("47effecc-3145-4e3c-ade1-763cfb751779"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3153),
                            Title = "Паранормальные",
                            TopicId = new Guid("36638e3f-0125-45a5-b319-5168f5204bd6")
                        },
                        new
                        {
                            Id = new Guid("a5c25fe0-3aae-4ca4-ac64-27397bb56cc9"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3154),
                            Title = "Маньяки",
                            TopicId = new Guid("36638e3f-0125-45a5-b319-5168f5204bd6")
                        },
                        new
                        {
                            Id = new Guid("3e722743-88a6-44cc-a06c-a7405bbe662c"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3156),
                            Title = "Питание",
                            TopicId = new Guid("5267e8c7-a191-417c-93ac-287800972997")
                        },
                        new
                        {
                            Id = new Guid("4a2e6de0-6374-4574-8d2c-29f0bb3e60df"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3157),
                            Title = "Фитнес",
                            TopicId = new Guid("5267e8c7-a191-417c-93ac-287800972997")
                        },
                        new
                        {
                            Id = new Guid("8d29a165-aa11-432f-a20c-349c417a3716"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3160),
                            Title = "Психосоматика",
                            TopicId = new Guid("5267e8c7-a191-417c-93ac-287800972997")
                        });
                });

            modelBuilder.Entity("backend.Domain.Entities.EmotionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Unicode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.HasKey("Id");

                    b.ToTable("Emotions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c00c1f6-e3a4-45b3-9c6f-618c90421ed8"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3220),
                            Label = "Советую",
                            Name = "thumbsup",
                            Unicode = "👍"
                        },
                        new
                        {
                            Id = new Guid("54a7ec3a-df40-4664-b0ae-546a1a34aab7"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3224),
                            Label = "Не советую",
                            Name = "thumbsdown",
                            Unicode = "👎"
                        },
                        new
                        {
                            Id = new Guid("a6e94fac-d9c5-437f-842d-cff0db0bd994"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3226),
                            Label = "До слез",
                            Name = "droplet",
                            Unicode = "💧"
                        },
                        new
                        {
                            Id = new Guid("06b4438b-ef60-426a-99f3-fe82ec54cd0d"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3227),
                            Label = "Мило",
                            Name = "panda_face",
                            Unicode = "🐼"
                        },
                        new
                        {
                            Id = new Guid("0bc340f2-27e5-4d89-9c2f-ba24657653b2"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3229),
                            Label = "Скучно",
                            Name = "zzz",
                            Unicode = "😴"
                        },
                        new
                        {
                            Id = new Guid("e607b72b-619a-4352-896b-5dce081f73c8"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3231),
                            Label = "Фууу",
                            Name = "shit",
                            Unicode = "💩"
                        },
                        new
                        {
                            Id = new Guid("c3a81a37-e762-4d99-aa35-2cb80e7dfd4d"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3232),
                            Label = "Страшно",
                            Name = "skull",
                            Unicode = "💀"
                        },
                        new
                        {
                            Id = new Guid("19c00d77-d421-4915-b05b-cd0801804dde"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3236),
                            Label = "Ничего не понятно",
                            Name = "confusing",
                            Unicode = "🙈"
                        },
                        new
                        {
                            Id = new Guid("ece72794-6466-4bf7-8756-2d96ff2d4503"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3237),
                            Label = "Мудро",
                            Name = "wise",
                            Unicode = "🔮"
                        },
                        new
                        {
                            Id = new Guid("b0282a18-af1c-4532-9910-57cf4f3f875a"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3239),
                            Label = "Познавательно",
                            Name = "bulb",
                            Unicode = "💡"
                        },
                        new
                        {
                            Id = new Guid("74f01d46-9071-495c-a4f8-7058bd484b7e"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3241),
                            Label = "Полезно",
                            Name = "useful",
                            Unicode = "🎯"
                        },
                        new
                        {
                            Id = new Guid("f10c4011-9c64-492e-8047-4c90507286fe"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3242),
                            Label = "Романтично",
                            Name = "romantic",
                            Unicode = "💞"
                        },
                        new
                        {
                            Id = new Guid("9cba8230-bf44-459c-ab1e-86bc59fe4ed6"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3244),
                            Label = "В отпуск",
                            Name = "palm_tree",
                            Unicode = "🏝"
                        },
                        new
                        {
                            Id = new Guid("f3338be6-4613-406b-8f63-a9aba4989cfb"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3245),
                            Label = "Не оторваться",
                            Name = "rocket",
                            Unicode = "🚀"
                        },
                        new
                        {
                            Id = new Guid("91eae0db-2e67-4bb8-96d3-662d2f8c6fb6"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(3247),
                            Label = "Весело",
                            Name = "fun",
                            Unicode = "😆"
                        });
                });

            modelBuilder.Entity("backend.Domain.Entities.FavoriteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId", "BookId")
                        .IsUnique();

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("backend.Domain.Entities.ImpressionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Impressions");
                });

            modelBuilder.Entity("backend.Domain.Entities.TopicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Title");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ceaae55b-1d51-45b5-8a9b-10a4b20720ab"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2872),
                            Title = "Психология"
                        },
                        new
                        {
                            Id = new Guid("77a24f9e-92cb-47ea-9081-20e304d0c265"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2893),
                            Title = "Саморазвитие"
                        },
                        new
                        {
                            Id = new Guid("2423895f-d942-43c9-a9e6-0780cc8e951f"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2894),
                            Title = "Нон-фикшн"
                        },
                        new
                        {
                            Id = new Guid("d8401754-a668-4dfb-bf8f-4285b09f2ae2"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2895),
                            Title = "Романтика"
                        },
                        new
                        {
                            Id = new Guid("bbc92f51-4ce7-4951-930b-25c81a077fb1"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2897),
                            Title = "Проза"
                        },
                        new
                        {
                            Id = new Guid("bd922041-23f5-4ad2-8ad3-9619acd1987d"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2899),
                            Title = "Детективы"
                        },
                        new
                        {
                            Id = new Guid("d0698f7c-bfef-4f30-a207-8ffb81aa9c99"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2901),
                            Title = "Бизнес"
                        },
                        new
                        {
                            Id = new Guid("8621520d-751d-453e-a5b8-f159806b3cd6"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2902),
                            Title = "Young Adult"
                        },
                        new
                        {
                            Id = new Guid("a7dcde27-4593-4678-b41d-035ac02b50da"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2903),
                            Title = "Фантастика"
                        },
                        new
                        {
                            Id = new Guid("ec548451-9cf2-4a7c-aaa3-3c45a5bc556a"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2905),
                            Title = "Фэнтези"
                        },
                        new
                        {
                            Id = new Guid("a93cc00e-9698-4b25-8af2-2be8c1419d02"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2906),
                            Title = "Мемуары"
                        },
                        new
                        {
                            Id = new Guid("6e2f95ea-1f6e-4a4c-9426-0163d8fe96b6"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2908),
                            Title = "Триллеры"
                        },
                        new
                        {
                            Id = new Guid("36638e3f-0125-45a5-b319-5168f5204bd6"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2909),
                            Title = "Хорроры"
                        },
                        new
                        {
                            Id = new Guid("5267e8c7-a191-417c-93ac-287800972997"),
                            CreatedAt = new DateTime(2025, 3, 15, 9, 55, 45, 124, DateTimeKind.Utc).AddTicks(2910),
                            Title = "Здоровье"
                        });
                });

            modelBuilder.Entity("backend.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookEntityCategoryEntity", b =>
                {
                    b.HasOne("backend.Domain.Entities.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Domain.Entities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmotionEntityImpressionEntity", b =>
                {
                    b.HasOne("backend.Domain.Entities.EmotionEntity", null)
                        .WithMany()
                        .HasForeignKey("EmotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Domain.Entities.ImpressionEntity", null)
                        .WithMany()
                        .HasForeignKey("ImpressionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Domain.Entities.BookEntity", b =>
                {
                    b.HasOne("backend.Domain.Entities.UserEntity", "User")
                        .WithMany("Books")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Domain.Entities.CategoryEntity", b =>
                {
                    b.HasOne("backend.Domain.Entities.TopicEntity", "Topic")
                        .WithMany("Categories")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("backend.Domain.Entities.FavoriteEntity", b =>
                {
                    b.HasOne("backend.Domain.Entities.BookEntity", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Domain.Entities.UserEntity", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Domain.Entities.ImpressionEntity", b =>
                {
                    b.HasOne("backend.Domain.Entities.BookEntity", "Book")
                        .WithMany("Impressions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Domain.Entities.UserEntity", "User")
                        .WithMany("Impressions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Domain.Entities.BookEntity", b =>
                {
                    b.Navigation("Impressions");
                });

            modelBuilder.Entity("backend.Domain.Entities.TopicEntity", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("backend.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Favorites");

                    b.Navigation("Impressions");
                });
#pragma warning restore 612, 618
        }
    }
}
